import asyncio
import logging
import os
import sqlite3
from datetime import datetime
from typing import Dict, Any
import aiofiles
import os
from dotenv import load_dotenv
import asyncio
from aiohttp import web

async def health_check(request):
    return web.Response(text="Bot is running!")

async def start_web_server():
    app = web.Application()
    app.router.add_get('/health', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(os.getenv('PORT', 8080)))
    await site.start()
    print("Web server started on port", os.getenv('PORT', 8080))

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    init_database()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check
    await start_web_server()
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
    
    Build command: pip install -r requirements.txt
Run command: python bot.py

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton,
    FSInputFile, Document, PhotoSize
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π)
BOT_TOKEN = "8395733479:AAF4mxEpGEIcym5NNq2krPLOHBLfpcRveDc"

# –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
FILES_DIR = "files"
os.makedirs(FILES_DIR, exist_ok=True)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_database():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite"""
    conn = sqlite3.connect('correspondence.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –≤—Ö—ñ–¥–Ω–æ—ó –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS incoming (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            doc_number TEXT UNIQUE,
            from_whom TEXT,
            subject TEXT,
            content TEXT,
            received_date TEXT,
            notes TEXT,
            file_path TEXT
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–æ—ó –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS outgoing (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            doc_number TEXT UNIQUE,
            to_whom TEXT,
            subject TEXT,
            content TEXT,
            sent_date TEXT,
            notes TEXT,
            file_path TEXT
        )
    ''')
    
    conn.commit()
    conn.close()

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class IncomingStates(StatesGroup):
    from_whom = State()
    subject = State()
    content = State()
    received_date = State()
    notes = State()
    confirm = State()
    file_attachment = State()

class OutgoingStates(StatesGroup):
    to_whom = State()
    subject = State()
    content = State()
    sent_date = State()
    notes = State()
    confirm = State()
    file_attachment = State()

class SearchState(StatesGroup):
    waiting_keyword = State()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def generate_doc_number(doc_type: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    conn = sqlite3.connect('correspondence.db')
    cursor = conn.cursor()
    
    table_name = doc_type.lower()
    cursor.execute(f'SELECT COUNT(*) FROM {table_name}')
    count = cursor.fetchone()[0]
    conn.close()
    
    prefix = "IN" if doc_type.lower() == "incoming" else "OUT"
    return f"{prefix}-{datetime.now().strftime('%Y%m%d')}-{count + 1:03d}"

def save_document(doc_type: str, data: Dict[str, Any]) -> str:
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    conn = sqlite3.connect('correspondence.db')
    cursor = conn.cursor()
    
    doc_number = generate_doc_number(doc_type)
    table_name = doc_type.lower()
    
    if doc_type.lower() == "incoming":
        cursor.execute(f'''
            INSERT INTO {table_name} 
            (doc_number, from_whom, subject, content, received_date, notes, file_path)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (doc_number, data['from_whom'], data['subject'], data['content'], 
              data['received_date'], data['notes'], ''))
    else:  # outgoing
        cursor.execute(f'''
            INSERT INTO {table_name} 
            (doc_number, to_whom, subject, content, sent_date, notes, file_path)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (doc_number, data['to_whom'], data['subject'], data['content'], 
              data['sent_date'], data['notes'], ''))
    
    conn.commit()
    conn.close()
    return doc_number

def search_documents(keyword: str):
    """–ü–æ—à—É–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º"""
    conn = sqlite3.connect('correspondence.db')
    cursor = conn.cursor()
    
    # –ü–æ—à—É–∫ —É –≤—Ö—ñ–¥–Ω—ñ–π –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó
    cursor.execute('''
        SELECT 'incoming' as type, doc_number, from_whom as org, subject, content, received_date as date, notes, file_path
        FROM incoming 
        WHERE from_whom LIKE ? OR subject LIKE ? OR content LIKE ? OR notes LIKE ?
    ''', (f'%{keyword}%', f'%{keyword}%', f'%{keyword}%', f'%{keyword}%'))
    
    incoming_results = cursor.fetchall()
    
    # –ü–æ—à—É–∫ —É –≤–∏—Ö—ñ–¥–Ω—ñ–π –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó
    cursor.execute('''
        SELECT 'outgoing' as type, doc_number, to_whom as org, subject, content, sent_date as date, notes, file_path
        FROM outgoing 
        WHERE to_whom LIKE ? OR subject LIKE ? OR content LIKE ? OR notes LIKE ?
    ''', (f'%{keyword}%', f'%{keyword}%', f'%{keyword}%', f'%{keyword}%'))
    
    outgoing_results = cursor.fetchall()
    
    conn.close()
    return incoming_results + outgoing_results

def update_file_path(doc_number: str, file_path: str):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É –¥–æ —Ñ–∞–π–ª—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö"""
    conn = sqlite3.connect('correspondence.db')
    cursor = conn.cursor()
    
    # –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —É –≤—Ö—ñ–¥–Ω—ñ–π –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó
    cursor.execute('UPDATE incoming SET file_path = ? WHERE doc_number = ?', (file_path, doc_number))
    if cursor.rowcount == 0:
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—Ö—ñ–¥–Ω—ñ–π, –æ–Ω–æ–≤–ª—é—î–º–æ —É –≤–∏—Ö—ñ–¥–Ω—ñ–π
        cursor.execute('UPDATE outgoing SET file_path = ? WHERE doc_number = ?', (file_path, doc_number))
    
    conn.commit()
    conn.close()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def main_menu_keyboard():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì• –í—Ö—ñ–¥–Ω–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—è"), KeyboardButton(text="üì§ –í–∏—Ö—ñ–¥–Ω–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—è")],
            [KeyboardButton(text="üîç –ü–æ—à—É–∫"), KeyboardButton(text="‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

def confirmation_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_yes")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="confirm_no")]
    ])
    return keyboard

def file_attachment_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–∞–π–ª", callback_data="attach_file")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    welcome_text = (
        "ü§ñ –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó.\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:"
    )
    await message.answer(welcome_text, reply_markup=main_menu_keyboard())

@dp.message(F.text == "‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞")
async def help_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–≤—ñ–¥–∫–∏"""
    help_text = (
        "üìã **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞**\n\n"
        "**üì• –í—Ö—ñ–¥–Ω–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—è** - —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤\n"
        "**üì§ –í–∏—Ö—ñ–¥–Ω–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—è** - —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤\n"
        "**üîç –ü–æ—à—É–∫** - –ø–æ—à—É–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "**‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞** - —Ü—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è\n\n"
        "–ü—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –≤–∏ –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω—ñ –ø–æ–µ—Ç–∞–ø–Ω–æ. "
        "–ü—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–æ–∂–Ω–∞ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–∞–π–ª –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n\n"
        "–ü–æ—à—É–∫ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –∑–∞ –≤—Å—ñ–º–∞ –ø–æ–ª—è–º–∏: –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é, —Ç–µ–º–æ—é, –∑–º—ñ—Å—Ç–æ–º —Ç–∞ –ø—Ä–∏–º—ñ—Ç–∫–∞–º–∏."
    )
    await message.answer(help_text, parse_mode="Markdown")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤—Ö—ñ–¥–Ω–æ—ó –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó
@dp.message(F.text == "üì• –í—Ö—ñ–¥–Ω–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—è")
async def incoming_start(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—Ö—ñ–¥–Ω–æ—ó –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó"""
    await message.answer("üìÑ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å, –≤—ñ–¥ –∫–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç:")
    await state.set_state(IncomingStates.from_whom)

@dp.message(IncomingStates.from_whom)
async def incoming_from_whom(message: Message, state: FSMContext):
    await state.update_data(from_whom=message.text)
    await message.answer("üìù –í–∫–∞–∂—ñ—Ç—å –æ–±'—î–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    await state.set_state(IncomingStates.subject)

@dp.message(IncomingStates.subject)
async def incoming_subject(message: Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await message.answer("üìã –í–∫–∞–∂—ñ—Ç—å –∑–º—ñ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å):")
    await state.set_state(IncomingStates.content)

@dp.message(IncomingStates.content)
async def incoming_content(message: Message, state: FSMContext):
    await state.update_data(content=message.text)
    await message.answer("üìÖ –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2024-01-15):")
    await state.set_state(IncomingStates.received_date)

@dp.message(IncomingStates.received_date)
async def incoming_date(message: Message, state: FSMContext):
    await state.update_data(received_date=message.text)
    await message.answer("üìå –î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–º—ñ—Ç–∫–∏ (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î', —è–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–∏–º—ñ—Ç–æ–∫):")
    await state.set_state(IncomingStates.notes)

@dp.message(IncomingStates.notes)
async def incoming_notes(message: Message, state: FSMContext):
    notes = message.text if message.text.lower() != '–Ω–µ–º–∞—î' else ''
    await state.update_data(notes=notes)
    
    data = await state.get_data()
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ–±—Ä–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    summary = (
        "üìã **–ü—ñ–¥—Å—É–º–æ–∫ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö:**\n\n"
        f"**–í—ñ–¥ –∫–æ–≥–æ:** {data['from_whom']}\n"
        f"**–û–±'—î–∫—Ç:** {data['subject']}\n"
        f"**–ó–º—ñ—Å—Ç:** {data['content']}\n"
        f"**–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:** {data['received_date']}\n"
        f"**–ü—Ä–∏–º—ñ—Ç–∫–∏:** {data['notes'] or '–ù–µ–º–∞—î'}\n\n"
        "–ß–∏ —Ö–æ—á–µ—Ç–µ –≤–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è?"
    )
    
    await message.answer(summary, reply_markup=confirmation_keyboard(), parse_mode="Markdown")
    await state.set_state(IncomingStates.confirm)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏—Ö—ñ–¥–Ω–æ—ó –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó
@dp.message(F.text == "üì§ –í–∏—Ö—ñ–¥–Ω–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—è")
async def outgoing_start(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏—Ö—ñ–¥–Ω–æ—ó –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü—ñ—ó"""
    await message.answer("üìÑ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å, –∫–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç:")
    await state.set_state(OutgoingStates.to_whom)

@dp.message(OutgoingStates.to_whom)
async def outgoing_to_whom(message: Message, state: FSMContext):
    await state.update_data(to_whom=message.text)
    await message.answer("üìù –í–∫–∞–∂—ñ—Ç—å –æ–±'—î–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    await state.set_state(OutgoingStates.subject)

@dp.message(OutgoingStates.subject)
async def outgoing_subject(message: Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await message.answer("üìã –í–∫–∞–∂—ñ—Ç—å –∑–º—ñ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å):")
    await state.set_state(OutgoingStates.content)

@dp.message(OutgoingStates.content)
async def outgoing_content(message: Message, state: FSMContext):
    await state.update_data(content=message.text)
    await message.answer("üìÖ –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2024-01-15):")
    await state.set_state(OutgoingStates.sent_date)

@dp.message(OutgoingStates.sent_date)
async def outgoing_date(message: Message, state: FSMContext):
    await state.update_data(sent_date=message.text)
    await message.answer("üìå –î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–º—ñ—Ç–∫–∏ (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î', —è–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–∏–º—ñ—Ç–æ–∫):")
    await state.set_state(OutgoingStates.notes)

@dp.message(OutgoingStates.notes)
async def outgoing_notes(message: Message, state: FSMContext):
    notes = message.text if message.text.lower() != '–Ω–µ–º–∞—î' else ''
    await state.update_data(notes=notes)
    
    data = await state.get_data()
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ–±—Ä–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    summary = (
        "üìã **–ü—ñ–¥—Å—É–º–æ–∫ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö:**\n\n"
        f"**–ö–æ–º—É:** {data['to_whom']}\n"
        f"**–û–±'—î–∫—Ç:** {data['subject']}\n"
        f"**–ó–º—ñ—Å—Ç:** {data['content']}\n"
        f"**–î–∞—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:** {data['sent_date']}\n"
        f"**–ü—Ä–∏–º—ñ—Ç–∫–∏:** {data['notes'] or '–ù–µ–º–∞—î'}\n\n"
        "–ß–∏ —Ö–æ—á–µ—Ç–µ –≤–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è?"
    )
    
    await message.answer(summary, reply_markup=confirmation_keyboard(), parse_mode="Markdown")
    await state.set_state(OutgoingStates.confirm)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
@dp.callback_query(F.data == "confirm_yes")
async def confirm_document(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    current_state = await state.get_state()
    data = await state.get_data()
    
    if current_state == IncomingStates.confirm.state:
        doc_number = save_document("incoming", data)
        doc_type = "–≤—Ö—ñ–¥–Ω–∏–π"
    else:  # OutgoingStates.confirm
        doc_number = save_document("outgoing", data)
        doc_type = "–≤–∏—Ö—ñ–¥–Ω–∏–π"
    
    await state.update_data(doc_number=doc_number)
    
    await callback.message.edit_text(
        f"‚úÖ {doc_type.capitalize()} –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!\n"
        f"üìÑ –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: **{doc_number}**\n\n"
        "–ë–∞–∂–∞—î—Ç–µ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–∞–π–ª?",
        reply_markup=file_attachment_keyboard(),
        parse_mode="Markdown"
    )
    
    if current_state == IncomingStates.confirm.state:
        await state.set_state(IncomingStates.file_attachment)
    else:
        await state.set_state(OutgoingStates.file_attachment)

@dp.callback_query(F.data == "confirm_no")
async def cancel_document(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –í–≤–µ–¥–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."
    )

@dp.callback_query(F.data == "attach_file")
async def request_file(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Ç –Ω–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É"""
    await callback.message.edit_text(
        "üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
        "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: PDF, DOCX, XLSX, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—à—ñ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤."
    )

@dp.callback_query(F.data == "main_menu")
async def go_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text("üè† –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ñ–∞–π–ª—ñ–≤
@dp.message(F.document, IncomingStates.file_attachment)
@dp.message(F.document, OutgoingStates.file_attachment)
async def handle_document(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"""
    await process_file(message, message.document, state)

@dp.message(F.photo, IncomingStates.file_attachment)
@dp.message(F.photo, OutgoingStates.file_attachment)
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    # –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    photo = message.photo[-1]
    await process_file(message, photo, state)

async def process_file(message: Message, file_obj, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É"""
    data = await state.get_data()
    doc_number = data.get('doc_number')
    
    if not doc_number:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª
        file_info = await bot.get_file(file_obj.file_id)
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        if hasattr(file_obj, 'file_name') and file_obj.file_name:
            file_name = file_obj.file_name
        else:
            # –î–ª—è —Ñ–æ—Ç–æ –±–µ–∑ —ñ–º–µ–Ω—ñ
            file_name = f"photo_{file_obj.file_id}.jpg"
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
        file_extension = os.path.splitext(file_name)[1]
        unique_filename = f"{doc_number}{file_extension}"
        file_path = os.path.join(FILES_DIR, unique_filename)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        await bot.download_file(file_info.file_path, file_path)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        update_file_path(doc_number, file_path)
        
        await message.answer(
            f"‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_number}!\n"
            "üè† –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."
        )
        await state.clear()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—à—É–∫—É
@dp.message(F.text == "üîç –ü–æ—à—É–∫")
async def search_start(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ—à—É–∫—É"""
    await message.answer("üîç –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É:")
    await state.set_state(SearchState.waiting_keyword)

@dp.message(SearchState.waiting_keyword)
async def search_documents_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É"""
    keyword = message.text
    results = search_documents(keyword)
    
    if not results:
        await message.answer(f"‚ùå –ó–∞ –∑–∞–ø–∏—Ç–æ–º '{keyword}' –¥–æ–∫—É–º–µ–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    response_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–∞ –∑–∞–ø–∏—Ç–æ–º:** '{keyword}'\n\n"
    
    for i, result in enumerate(results, 1):
        doc_type, doc_number, org, subject, content, date, notes, file_path = result
        
        type_emoji = "üì•" if doc_type == "incoming" else "üì§"
        org_label = "–í—ñ–¥" if doc_type == "incoming" else "–ö–æ–º—É"
        date_label = "–û—Ç—Ä–∏–º–∞–Ω–æ" if doc_type == "incoming" else "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
        
        file_info = " üìé" if file_path else ""
        
        response_text += (
            f"{type_emoji} **{i}. {doc_number}**{file_info}\n"
            f"**{org_label}:** {org}\n"
            f"**–¢–µ–º–∞:** {subject}\n"
            f"**{date_label}:** {date}\n"
            f"**–ó–º—ñ—Å—Ç:** {content[:100]}{'...' if len(content) > 100 else ''}\n\n"
        )
        
        if len(response_text) > 3500:  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            response_text += "... —Ç–∞ —ñ–Ω—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"
            break
    
    await message.answer(response_text, parse_mode="Markdown")
    await state.clear()

# Health check –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥—É
async def health_check(request):
    """Health check endpoint –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥—É"""
    return web.Response(text="Bot is running!")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check"""
    app = web.Application()
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv('PORT', 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"Web server started on port {port}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        init_database()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check (–¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥—É)
        await start_web_server()
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise
    finally:
        await bot.session.close()
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
